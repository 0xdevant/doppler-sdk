export const AirlockABI = [
  {
    type: 'constructor',
    inputs: [
      {
        name: 'poolManager_',
        type: 'address',
        internalType: 'contract IPoolManager',
      },
    ],
    stateMutability: 'nonpayable',
  },
  { type: 'receive', stateMutability: 'payable' },
  {
    type: 'function',
    name: 'create',
    inputs: [
      { name: 'name', type: 'string', internalType: 'string' },
      { name: 'symbol', type: 'string', internalType: 'string' },
      { name: 'initialSupply', type: 'uint256', internalType: 'uint256' },
      { name: 'numTokensToSell', type: 'uint256', internalType: 'uint256' },
      {
        name: 'poolKey',
        type: 'tuple',
        internalType: 'struct PoolKey',
        components: [
          { name: 'currency0', type: 'address', internalType: 'Currency' },
          { name: 'currency1', type: 'address', internalType: 'Currency' },
          { name: 'fee', type: 'uint24', internalType: 'uint24' },
          { name: 'tickSpacing', type: 'int24', internalType: 'int24' },
          { name: 'hooks', type: 'address', internalType: 'contract IHooks' },
        ],
      },
      { name: 'recipients', type: 'address[]', internalType: 'address[]' },
      { name: 'amounts', type: 'uint256[]', internalType: 'uint256[]' },
      {
        name: 'tokenFactory',
        type: 'address',
        internalType: 'contract ITokenFactory',
      },
      { name: 'tokenData', type: 'bytes', internalType: 'bytes' },
      {
        name: 'governanceFactory',
        type: 'address',
        internalType: 'contract IGovernanceFactory',
      },
      { name: 'governanceData', type: 'bytes', internalType: 'bytes' },
      {
        name: 'hookFactory',
        type: 'address',
        internalType: 'contract IHookFactory',
      },
      { name: 'hookData', type: 'bytes', internalType: 'bytes' },
      { name: 'migrator', type: 'address', internalType: 'contract IMigrator' },
      { name: 'salt', type: 'bytes32', internalType: 'bytes32' },
    ],
    outputs: [
      { name: '', type: 'address', internalType: 'address' },
      { name: '', type: 'address', internalType: 'address' },
      { name: '', type: 'address', internalType: 'address' },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'getModuleState',
    inputs: [{ name: '', type: 'address', internalType: 'address' }],
    outputs: [{ name: '', type: 'uint8', internalType: 'enum ModuleState' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'getTokenData',
    inputs: [{ name: 'token', type: 'address', internalType: 'address' }],
    outputs: [
      {
        name: 'poolKey',
        type: 'tuple',
        internalType: 'struct PoolKey',
        components: [
          { name: 'currency0', type: 'address', internalType: 'Currency' },
          { name: 'currency1', type: 'address', internalType: 'Currency' },
          { name: 'fee', type: 'uint24', internalType: 'uint24' },
          { name: 'tickSpacing', type: 'int24', internalType: 'int24' },
          { name: 'hooks', type: 'address', internalType: 'contract IHooks' },
        ],
      },
      { name: 'timelock', type: 'address', internalType: 'address' },
      { name: 'governance', type: 'address', internalType: 'address' },
      { name: 'migrator', type: 'address', internalType: 'contract IMigrator' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'migrate',
    inputs: [{ name: 'asset', type: 'address', internalType: 'address' }],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'owner',
    inputs: [],
    outputs: [{ name: '', type: 'address', internalType: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'poolManager',
    inputs: [],
    outputs: [
      { name: '', type: 'address', internalType: 'contract IPoolManager' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'renounceOwnership',
    inputs: [],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'setModuleState',
    inputs: [
      { name: 'modules', type: 'address[]', internalType: 'address[]' },
      { name: 'states', type: 'uint8[]', internalType: 'enum ModuleState[]' },
    ],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'transferOwnership',
    inputs: [{ name: 'newOwner', type: 'address', internalType: 'address' }],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'event',
    name: 'Create',
    inputs: [
      {
        name: 'asset',
        type: 'address',
        indexed: false,
        internalType: 'address',
      },
      {
        name: 'poolKey',
        type: 'tuple',
        indexed: false,
        internalType: 'struct PoolKey',
        components: [
          { name: 'currency0', type: 'address', internalType: 'Currency' },
          { name: 'currency1', type: 'address', internalType: 'Currency' },
          { name: 'fee', type: 'uint24', internalType: 'uint24' },
          { name: 'tickSpacing', type: 'int24', internalType: 'int24' },
          { name: 'hooks', type: 'address', internalType: 'contract IHooks' },
        ],
      },
      {
        name: 'hook',
        type: 'address',
        indexed: false,
        internalType: 'address',
      },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'Migrate',
    inputs: [
      {
        name: 'asset',
        type: 'address',
        indexed: false,
        internalType: 'address',
      },
      {
        name: 'pool',
        type: 'address',
        indexed: false,
        internalType: 'address',
      },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'OwnershipTransferred',
    inputs: [
      {
        name: 'previousOwner',
        type: 'address',
        indexed: true,
        internalType: 'address',
      },
      {
        name: 'newOwner',
        type: 'address',
        indexed: true,
        internalType: 'address',
      },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'SetModuleState',
    inputs: [
      {
        name: 'module',
        type: 'address',
        indexed: false,
        internalType: 'address',
      },
      {
        name: 'state',
        type: 'uint8',
        indexed: false,
        internalType: 'enum ModuleState',
      },
    ],
    anonymous: false,
  },
  { type: 'error', name: 'ArrayLengthsMismatch', inputs: [] },
  {
    type: 'error',
    name: 'OwnableInvalidOwner',
    inputs: [{ name: 'owner', type: 'address', internalType: 'address' }],
  },
  {
    type: 'error',
    name: 'OwnableUnauthorizedAccount',
    inputs: [{ name: 'account', type: 'address', internalType: 'address' }],
  },
  { type: 'error', name: 'WrongInitialSupply', inputs: [] },
  { type: 'error', name: 'WrongModuleState', inputs: [] },
] as const;
